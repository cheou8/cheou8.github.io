[{"title":"python的第二天","url":"/2023/06/11/123-1/","content":"python 循环语句while 循环while 判断语句(condition):\n          执行语句(statements)\n执行流程图如下：\n\n无限循环n &#x3D;100\nsum &#x3D; 0\ncounter &#x3D; 1\nwhile counter &lt;&#x3D; n:                         当counter小于等于n时\n           sum &#x3D; sum + counter           sum+counter\n           counter +&#x3D; 1                          counter+1\nprint(“1到 %d 之和为：%d” % (n,sum))            前面的%d输出n,后面输出sum\n无限循环在服务器上客户端的实时请求非常有用\nwhile 循环使用else 语句如果while后面的条件语句为false时，则执行else的语句块\nwhile &lt;\\expr&gt;:\n        &lt;\\statement(s)&gt;\nelse:\n        &lt;\\additional_statement(s)&gt;\nexpr条件语句为true，则执行statement(s)语句块，如果为false，则执行additional_statement(s)。\n例：count &#x3D; 0\nwhile count &gt;5:\n        print(count,”小于5”)\n        count &#x3D; count  + 1\nelse:\n        print(count,”大于等于5”)\n简单语句组类似if语句语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中\nflag &#x3D; 1\nwhile(flag): print(‘welcome’)\nprint(“bye”)\n\nfor 语句for &lt;\\variable&gt; in &lt;\\sequence&gt;:\n       &lt;\\statements&gt;\nelse:\n       &lt;\\statements&gt;\n\n"},{"title":"python第一天","url":"/2023/06/08/123/","content":"#以它开头就是注释print(“cheous”)#比如这样‘’’在英文里的单双引号都是注释，一定要上三下三对称且一样‘’’“””cheous“””‘’’if True:    print (“Answer”)    print (“True”)else:    print (“Answer”)    print (“False”)‘’’   #python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。\n   #缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数\ntotal &#x3D; [‘item_one’,’item_two’,’item_three’,’item_four’,’item_five’]\ntotal &#x3D; ‘item_one’ +         ‘item_two’ +         ‘item_three’   #Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \\ 来实现多行语句#数字类型   #python有四种类型:整型，布尔型，浮点型，复数型‘’’int(整形)：如1，只有一种整数类型，bool(布尔型)：如ture,float(浮点型)：如1.23448，5.365complex(复数型)：如1+2j,1.23-3x‘’’#字符串‘’’Python 中单引号 ‘ 和双引号 “ 使用完全相同。使用三引号(‘’ 或 “”)可以指定一个多行字符串。转义符 \\ (无法被键盘录入的字符)反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \\n” 则 \\n 会显示，并不是换行。按字面意义级联字符串，如 “this “ “is “ “string” 会被自动转换为 this is string。字符串可以用 + 运算符连接在一起，用 * 运算符重复。Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。Python 中的字符串不能改变。Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。‘’’word &#x3D; ‘字符串’sentence &#x3D; “这是一个句子”paragraph &#x3D; “””这是一个段落，可以有多行组成”””\nstr&#x3D;’123456789’         #定义str为字符串123456789print(str)              #输出字符串print(str[0:-1])        #输出字符串的第一个输出到倒数第二个print(str[0])           #输出字符串的第一个print(str[2:5])         #输出字符串的第三个到第六个print(str[2:])          #输出字符串从第三个到结束print(str[1:5:2])       #输出字符串从第二个到第五个，步长为二(步长：就是间隔为二，每隔两个就输出)print(str * 2)          #输出字符串两次print(str + ‘你好’)     #用加号连接字符串print(‘———————————-‘)print(‘hello\\nrunoob’)  #使用反斜杠+n转义print(r’hello\\nrunoob’) #在字符串前+r不会转义#input(‘\\n\\n按下enter键后退出’)      #以上代码中 ，\\n\\n 在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出print输出\n   #换行输出n&#x3D;’a’y&#x3D;’b’print(n)print(y)print(‘————————————‘)   #不换行输出print(n,end&#x3D;’’)print(y,end&#x3D;’’)\n#tuple(元组)和list(列表)类似，不同的是元组的元素不可以修改，里面的类型也可以不同#set(集合)   #集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。   #基本功能是进行成员关系测试和删除重复元素。sites &#x3D; {‘google’,’taobao’,’runoob’,’facebook’,’zhihu’,’baidu’}print(sites)if ‘runoob’ in sites:   print(‘runoob 在集合中’)else:   print(‘runoob 不在集合中’)a &#x3D; set(‘cheous’)b &#x3D; set(‘english’)print(a)          #查看aprint(a - b)      #a与b的差集print(a | b)      #a与b的并集print(a &amp; b)      #a与b的交集print(a ^ b)      #a与b中不同时存在的元素#dictionary(字典)   #字典（dictionary）是Python中另一个非常有用的内置数据类型。   #列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。   #字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。   #键(key)必须使用不可变类型。   #在同一个字典中，键(key)必须是唯一的。dict &#x3D; {}dict[‘one’] &#x3D; ‘cheous’dict[2] &#x3D; ‘sun’tinydict &#x3D; {‘name’:’123’,’code’:’456’,’web’:’www.cheous.top&#39;}  #print(dict[‘one’])         #输出键为’one’的值print(dict[2])             #输出键为2的值print(tinydict)            #输出完整的字典print(tinydict.keys())     #输出字典中所有键print(tinydict.values())   #输出字典中所有值\n"},{"title":"MarkDown的语法","url":"/2023/06/05/MarkDown%E7%9A%84%E8%AF%AD%E6%B3%95/","content":"本篇借鉴了[markdown](Markdown 标题语法 | Markdown 官方教程)基本教程\n1.markdown标题语法要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。例如，添加三个 # 表示创建一个三级标题 (&lt;h3&gt;) (例如：### My Header)。\nmarkdown # &#x3D; &lt;h1&gt;HTML &lt;&#x2F;h1&gt;markdown ## &#x3D; &lt;h2&gt;HTML &lt;&#x2F;h2&gt;markdown ### &#x3D; &lt;h3&gt;HTML&lt;&#x2F;h3&gt;markdown #### &#x3D; &lt;h4&gt;HTML&lt;&#x2F;h4&gt;markdown ##### &#x3D; &lt;h5&gt;HTML&lt;&#x2F;h5&gt;markdown ###### &#x3D; &lt;h6&gt;HTML&lt;&#x2F;h6&gt;2.markdown段落要创建段落，请使用空白行将一行或多行文本进行分隔。\nmarkdown:\n基尼太美\n贝贝贝贝\nHTML:\n&lt;p&gt;基尼太美&lt;&#x2F;p&gt;\n&lt;p&gt;贝贝贝贝&lt;&#x2F;p&gt;\n"},{"title":"Hello World","url":"/2023/06/02/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"菜鸟的救赎","url":"/2023/06/04/index/","content":"\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n1.GitHub注册username&#x3D;昵称  Email&#x3D;个人邮箱\npassword&#x3D;密码 下面是验证 完后就可以使用了 。\nGitHub 的仓库分为两种，一种是public repositories公开免费版，一种是private repositories私有付费版。其中，免费版是完全公开的，而私有版一般是由企业或者不愿公开仓库的个人用户购买，在这里，我们选择免费版就可以\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n按照上图，创建出自己的仓库\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n依照上图，点击下载\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n再点击那个窗户（其实是Windows的意思）\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n选64bit git for windows setup的（现在电脑应该没有32bit的吧,有当我没说）\n\n\n\n\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n第一种是让 Git 自己选择，名字是 master ，但是未来也有可能会改为其他名字；第二种是我们自行决定，默认是 main，当然，你也可以改为其他的名字。一般默认第一种，点击 [next] 到第七步。\n要选第二个，不然就像我一样后面要改，因为GitHub库已经全面改成main了\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nUse Git from Git Bash only\nThis is the most cautious choice as your PATH will not be modified at all. You w only be able to use the Git command line tools from Git Bash.\n仅从 Git Bash 使用 Git\n这是最谨慎的选择，因为您的 PATH 根本不会被修改。您将只能使用 Git Bash 中的 Git 命令行工具。\nGit from the command line and also from 3rd-party software\n(Recommended) This option adds only some minimal Git wrappers to your PATH to avoid cluttering your environment with optional Unix tools.\nYou will be able to use Git from Git Bash, the Command Prompt and the Windov PowerShell as well as any third-party software looking for Git in PATH.\n从命令行以及第三方软件进行 Git\n（推荐）此选项仅将一些最小的 Git 包装器添加到PATH中，以避免使用可选的 Unix 工具使环境混乱。\n您将能够使用 Git Bash 中的 Git，命令提示符和 Windov PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件。\nUse Git and optional Unix tools from the Command Prompt\nBoth Git and the optional Unix tools will be added to your PATH.\nWarning: This will override Windows tools like “find”and “sort”. Only use this option if you understand the implications.\n使用命令提示符中的 Git 和可选的 Unix 工具\nGit 和可选的 Unix 工具都将添加到您的 PATH 中。\n警告：这将覆盖 Windows 工具，例如 “find” and “sort”. 仅在了解其含义后使用此选项。\n第一种是仅从 Git Bash 使用 Git。这个的意思就是你只能通过 Git 安装后的 Git Bash 来使用 Git ，其他的什么命令提示符啊等第三方软件都不行。\n第二种是从命令行以及第三方软件进行 Git。这个就是在第一种基础上进行第三方支持，你将能够从 Git Bash，命令提示符(cmd) 和 Windows PowerShell 以及可以从 Windows 系统环境变量中寻找 Git 的任何第三方软件中使用 Git。推荐使用这个。\n第三种是从命令提示符使用 Git 和可选的 Unix 工具。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。一句话，适合比较懂的人折腾。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nUse bundled OpenSSH\nThis uses ssh. exe that comes with Git.\n使用捆绑的 OpenSSH\n这使用的 ssh.exe 是 Git 自带的\nUse external OpenSSH\nNEW! This uses an external ssh. exe. Git will not install its own OpenSSH\n(and related) binaries but use them as found on the PATH.\n使用外部 OpenSSH\n新！这使用外部 ssh.exe 文件。\nGit 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nuse the OpenSSL library\nServer certificates will be validated using the ca-bundle. crt file.\n使用 OpenSSL 库\n服务器证书将使用 ca-bundle.crt 文件进行验证。\nUse the native Windows Secure Channel library\nServer certificates will be validated using Windows Certificate Stores.\nThis option also allows you to use your company’s internal Root CA certificates distributed e.g. via Active Directory Domain Services.\n使用本机 Windows 安全通道库\n服务器证书将使用 Windows 证书存储进行验证。\n此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nCheckout Windows-style, commit Unix-style line endings\nGit will convert LF to CRLF when checking out text files.\nWhen committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Windows(“core. autocrif”is set to “true”).\n签出 Windows 样式，提交 Unix 样式的行结尾\nGit 签出文本文件时，会将 LF 转换为 CRLF。\n提交文本文件时，CRLF 将转换为 LF。\n对于跨平台项目，这是 Windows 上的建议设置（”core.autocrif” 设置为 “true”）。\nCheckout as-is, commit Unix-style line endings\nGit will not perform any conversion when checking out text files.\nWhen committing text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Unix(“core.autocrif” is set to “input”).\n按原样签出，提交 Unix 样式的行结尾\nGit 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。\n对于跨平台项目，这是在 Unix 上的建议设置（”core.autocrif” 设置为 “input”）。\nCheckout as-is, commit as-is\nGit will not perform any conversions when checking out or committing text files.\nChoosing this option is not recommended for cross-platform projects(“core. autocrif”is set to “false”).\n按原样签出，按原样提交\nGit 在签出或提交文本文件时不会执行任何转换。\n不建议跨平台项目选择此选项（”core.autocrif” 设置为 “false”）。\n这三种选择分别是：签出 Windows 样式，提交 Unix 样式的行结尾。按原样签出，提交Unix样式的行结尾。按原样签出，按原样提交。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nUse MinTTY(the default terminal of MSYS2)\nGit Bash will use MinTTY as terminal emulator, which sports a resizable window\nnon-rectangular selections and a Unicode font.Windows console programs(such\nas interactive Python) must be launched via ‘winpty’ to work in MinTTY.\n使用 MinTTY（MSYS2的默认终端）\nGit Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。\nWindows 控制台程序（例如交互式 Python）必须通过 “winpty” 启动才能在 MinTTY 中运行。\nUse Windows’ default console\nwindow Git will use the default console window of Windows(“cmd.exe”), which works v\nwith Win32 console programs such as interactive Python or node. js, but has a\nvery limited default scroll-back,needs to be configured to use a Unicode font in\norder to display non-ASCII characters correctly, and prior to Windows 10 its\nwindow was not freely resizable and it only allowed rectangular text selections.\n使用 Windows 的默认控制台窗口\nGit 将使用 Windows 的默认控制台窗口（”cmd.exe”），该窗口可与 Win32 控制台程序（例如交互式Python 或\nnode.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在\nWindows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nODefault(fast-forward or merge)\nThis is the standard behavior ofgit pull”: fast-forward the current branch to\nthe fetched branch when possible, otherwise create a merge commit.\n默认（快进或合并）\n这是 “git pull” 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。\nORebase Rebase the current branch onto the fetched branch. If there are no local\ncommits to rebase, this is equivalent to a fast-forward.\n变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。\nOonly ever fast-forward\nFast-forward to the fetched branch. Fail if that is not possible.\n只能快进快进到获取的分支。如果不可能，则失败。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nGit Credential Manager\nUse the cross-platform Git Credential Manager.\nSee more information about the future of Git Credential Manager here.\nGit 凭证管理\n使用跨平台的 Git  凭证管理。\n在此处查看有关 Git 凭证管理未来的更多信息。\nNone\nDo not use a credential helper.\n不使用凭证助手。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nEnable file system caching\nFile system data will be read in bulk and cached in memory for certain operations(“core.fscache” is set to “true”).\nThis provides a significant performance boost.\n启用文件系统缓存\n将批量读取文件系统数据并将其缓存在内存中以进行某些操作（”core.fscache” 设置为 “true”）。\n这可以显着提高性能。\nEnable symbolic links\nEnable symbolic links(requires the SeCreateSymbolicLink permission).\nPlease note that existing repositories are unaffected by this setting.\n启用符号链接\n启用符号链接（需要SeCreateSymbolicLink权限）。\n请注意，现有存储库不受此设置的影响。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\nEnable experimental support for pseudo consoles.\n(NEW!) This allows running native console programs like Node or Python in a Git Bash window without using winpty,\nbut it still has known bugs.\n启用对伪控制台的实验性支持。\n(新功能!) 这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python 之类的本机控制台程序，\n但是它仍然存在已知的 bug。\nEnable experimental built-in file system monitor\n(NEW!) Automatically run a built-in file system watcher, to speed up common operations such as ‘ git status’, ‘ git add’, ‘ git commit’, etc in worktrees containing many files.\n启用实验性内置文件系统监视器\n（新！）自动运行内置文件系统监视器，以加快包含许多文件的工作树中的常见操作，例如 ‘git status’、’git add’、’git commit’ 等.\n这是实验性功能，可能会有一些小错误之类的，建议不用开启。\n以上就是git的安装步骤\n给大家讲一下新装的git，他有git bash,git cmd,git gui,git faqs,git release note,\nGit bash:是基于CMD的，在CMD的基础上增添一些新的命令与功能，平时主要用这个，功能很丰富\nGit cmd:不能说和 cmd 完全一样，只能说一模一样，功能少得可怜\nGit faqs:就是 Git Frequently Asked Questions（常问问题）\nGit gui:就是 Git 的图形化界面\n2.Git的使用方法\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n点击鼠标右键，打开git bash here\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n打开后输入git,回车得到上图，你的git就安装完成了\n在之前我已经完成了GitHub的注册还有git的安装，现在就是将git与GitHub绑定了。为什么要绑定GitHub呢？就是为了方便我们上传文件。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n我们要用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置，要想生成SSH key，就要先安装 SSH，不过我们安装了 Git Bash，其应该自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash（这是我自己新建的）\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n输入ssh，要是和上图一样就ok\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Courier New\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"Consolas\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.10{\nfont-family:'Times New Roman';\n}\nspan.15{\nfont-family:'Courier New';\nfont-size:10.0000pt;\n}\np.pre{\nmso-style-name:\"HTML 预设格式\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:宋体;\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n$ cd ~&#x2F;.ssh\n$ ls\n$ cat id_rsa.pub\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\n@font-face{\nfont-family:\"微软雅黑\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n复制那段公钥，（git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和Shift+insert）\n\n\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n前两张是我的，但我已经做了，在网上找了一个把之前ssh公钥照这样粘过去就行\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T git@github.com 进行检验，我这样就是成功了，第一次验证时会询问你，填yes就行\n3.提交文件\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n打开我创建的sun（就是太阳，我用了翻译）项目\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n我用的是ssh,因为翻了资料，大佬是这么说的：（简单来说，你要安全就ssh,如没这要求就https）\nHTTPS：不管是谁，拿到url随便clone，但是在push的时候需要验证用户名和密码；\nSSH：clone的项目你必须是拥有者或者管理员，而且需要在clone前添加SSH Key。SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。\n言归正传，复制这段地址\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n接下来，就输入git clone 你复制的地址\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n接下来看看你的本地仓库是否有了你远程仓库的文件（第一个.git是隐藏文件）\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\np.p{\nmso-style-name:\"普通\\(网站\\)\";\nmargin-top:5.0000pt;\nmargin-right:0.0000pt;\nmargin-bottom:5.0000pt;\nmargin-left:0.0000pt;\nmso-margin-top-alt:auto;\nmso-margin-bottom-alt:auto;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n当你输入git status 时，会发现emmm,没用，错了。为什么呢？提示说没有.git这样一个目录，是由于git没有初始化，解决办法如下：git init就可以了！\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\np.p{\nmso-style-name:\"普通\\(网站\\)\";\nmargin-top:5.0000pt;\nmargin-right:0.0000pt;\nmargin-bottom:5.0000pt;\nmargin-left:0.0000pt;\nmso-margin-top-alt:auto;\nmso-margin-bottom-alt:auto;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n从此目录进入 Git Bash，输入 git status 命令查看仓库状态\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m 提交信息 将其提交到本地仓库\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n到最后要把它上传到远程仓库时，我发现怎么也弄不好，后来一搜发现我没有origin这个东西。\ngit remote -v：    查看远程仓库详细信息，可以看到仓库名称，关联地址\ngit remote remove orign：删除orign仓库（比如名称错误）\ngit remote add origin 仓库地址：重新添加远程仓库地址\ngti push -u origin master： 提交到远程仓库的master主干\n我们要怎么用呢？\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n一定要记得远程仓库的地址也要用ssh的（原因如下）\n本地Git与远端服务器GitLab之间连接方式主要分为：SSH方式和HTTP方式。\nHTTP方式：这种方式要求project在创建的时候只能选择“Public”公开状态，Private和Internal私有模式下不能使用http方式进行连接，如果考虑到安全性必须进行安全设置。\nSSH方式：这是一种相对安全的方式，本地git仓库和远端gitlab仓库之间的传输是通过SSH加密，SSH方式在三种project模式下都可以使用。\n\n\n@font-face{\nfont-family:\"Times New Roman\";\n}\n@font-face{\nfont-family:\"宋体\";\n}\n@font-face{\nfont-family:\"Calibri\";\n}\np.MsoNormal{\nmso-style-name:正文;\nmso-style-parent:\"\";\nmargin:0pt;\nmargin-bottom:.0001pt;\ntext-align:left;\nfont-family:Calibri;\nmso-fareast-font-family:宋体;\nmso-bidi-font-family:'Times New Roman';\nfont-size:12.0000pt;\n}\nspan.msoIns{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:underline;\ntext-underline:single;\ncolor:blue;\n}\nspan.msoDel{\nmso-style-type:export-only;\nmso-style-name:\"\";\ntext-decoration:line-through;\ncolor:red;\n}\n@page{mso-page-border-surround-header:no;\n mso-page-border-surround-footer:no;}@page Section0{\n}\ndiv.Section0{page:Section0;}\n\n这样就成功了！！！（这是之前踩坑做的所以括号里是master）\n"}]